version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: vaporform-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic.yml:/dynamic.yml:ro
      - ./traefik/acme.json:/acme.json
      - traefik-logs:/var/log/traefik
    networks:
      - vaporform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.vaporform.dev`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

  # MongoDB (GridFS + Metadata)
  mongodb:
    image: mongo:7.0
    container_name: vaporform-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: vaporform
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: vaporform
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      - vaporform-network
    command: mongod --auth

  # PostgreSQL (Encore Metadata)
  postgres:
    image: postgres:16-alpine
    container_name: vaporform-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: vaporform
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: vaporform
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - vaporform-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: vaporform-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - vaporform-network
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY}

  # Redis (Session/Cache)
  redis:
    image: redis:7-alpine
    container_name: vaporform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - vaporform-network
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # Encore Backend API
  encore-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: vaporform-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://vaporform:${POSTGRES_PASSWORD}@postgres:5432/vaporform
      MONGODB_URI: mongodb://vaporform:${MONGO_PASSWORD}@mongodb:27017/vaporform?authSource=admin
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET}
      DAYTONA_API_URL: ${DAYTONA_API_URL}
      DAYTONA_API_KEY: ${DAYTONA_API_KEY}
      BASE_DOMAIN: ${BASE_DOMAIN:-vaporform.dev}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - deployment-builds:/app/builds
    networks:
      - vaporform-network
    depends_on:
      - postgres
      - mongodb
      - qdrant
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${BASE_DOMAIN:-vaporform.dev}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=4000"

  # WebSocket Terminal Server
  terminal-ws:
    build:
      context: .
      dockerfile: Dockerfile.terminal
    container_name: vaporform-terminal
    restart: unless-stopped
    ports:
      - "4001:4001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://vaporform:${POSTGRES_PASSWORD}@postgres:5432/vaporform
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      WS_PORT: 4001
    networks:
      - vaporform-network
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.terminal.rule=Host(`ws.${BASE_DOMAIN:-vaporform.dev}`)"
      - "traefik.http.routers.terminal.entrypoints=websecure"
      - "traefik.http.routers.terminal.tls.certresolver=letsencrypt"
      - "traefik.http.services.terminal.loadbalancer.server.port=4001"

  # Next.js Frontend
  frontend:
    build:
      context: ../vaporform-frontend
      dockerfile: Dockerfile
    container_name: vaporform-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${BASE_DOMAIN:-vaporform.dev}
      NEXT_PUBLIC_WS_URL: wss://ws.${BASE_DOMAIN:-vaporform.dev}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
    networks:
      - vaporform-network
    depends_on:
      - encore-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${BASE_DOMAIN:-vaporform.dev}`) || Host(`www.${BASE_DOMAIN:-vaporform.dev}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

networks:
  vaporform-network:
    name: vaporform-network
    driver: bridge

volumes:
  mongodb-data:
  mongodb-config:
  postgres-data:
  qdrant-data:
  redis-data:
  traefik-logs:
  deployment-builds:
