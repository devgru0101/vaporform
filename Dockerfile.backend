# Multi-stage build for Encore Backend
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build Encore app
RUN npm run build || true

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tini

# Copy built application
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/encore.app ./
COPY --from=builder /app/encore.gen ./encore.gen
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/users ./users
COPY --from=builder /app/organizations ./organizations
COPY --from=builder /app/projects ./projects
COPY --from=builder /app/vfs ./vfs
COPY --from=builder /app/git ./git
COPY --from=builder /app/vector ./vector
COPY --from=builder /app/ai ./ai
COPY --from=builder /app/workspace ./workspace
COPY --from=builder /app/infra ./infra
COPY --from=builder /app/billing ./billing

# Create non-root user
RUN addgroup -g 1001 -S encore && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G encore -g encore encore && \
    chown -R encore:encore /app

USER encore

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/health', (r) => {if(r.statusCode !== 200) throw new Error(r.statusCode)})"

EXPOSE 4000

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "--loader", "tsx", "encore.gen/main.js"]
